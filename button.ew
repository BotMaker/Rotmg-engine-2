include inv.ew



sequence class_list,class_freelist,button_freelist
class_list={}
class_freelist={}
button_freelist={}




global constant button_x = 1
global constant button_y = 2
global constant button_width = 3
global constant button_height = 4
global constant button_clicked = 5
global constant button_index = 6
global constant button_invslot = 7
global constant button_isvisable = 8


global procedure button_set_index(integer handle, integer v)
  class_list[handle][button_index]=v
end procedure

include lootbag.ew

atom click_time
click_time=0

integer preselected,premx,premy
preselected=0
premx=0
premy=0

integer mouse_x, mouse_y
mouse_x = 0
mouse_y = 0

global procedure button_update_mouse(integer mx, integer my)
    mouse_x = mx
    mouse_y = my
end procedure


global function button_new(integer x, integer y, atom width, integer height,integer index,integer invslot)
  integer handle
  if length(class_freelist)>0 then
    handle= class_freelist[1]
    class_freelist = class_freelist[2..length(class_freelist)]
  else
    class_list= append(class_list,{})
	button_freelist= append(button_freelist,{})
    handle=length(class_list)
  end if

  class_list[handle]={0,0,0,0,0,0,0,0}
  button_freelist[handle]={}
  
  class_list[handle][button_x]=x
  class_list[handle][button_y]=y
  class_list[handle][button_width]=width
  class_list[handle][button_height]=height
  class_list[handle][button_clicked]=0
  class_list[handle][button_index]=index
  class_list[handle][button_invslot]=invslot
  class_list[handle][button_isvisable]=1
  return handle
end function




--=========================================================
-- Swap Logic
--=========================================================
procedure swap_inv_slots(integer a, integer b)
    object temp
    temp = inv[a]
    inv[a] = inv[b]
    inv[b] = temp
end procedure


procedure try_swap_slots(integer a, integer b)
    integer typeA, typeB
	sequence items

    if a = b or a <= 0 or b <= 0 then
        return
    end if
	
	if a > length(inv) or b > length(inv) then
      return
    end if

    typeA = inv[a][2]
    typeB = inv[b][2]

    -- Allow swap if either is general slot (0) or same type
    if typeA = 0 or typeB = 0 or typeA = typeB then
        swap_inv_slots(a, b)

        -- Update button index to match new inventory item
        if a <= length(class_list) and length(class_list[a]) then
            class_list[a][button_index] = inv[a][1]
        end if

        if b <= length(class_list) and length(class_list[b]) then
            class_list[b][button_index] = inv[b][1]
        end if
		
		if lootbag_enabled=1 then
		  if a>12 or b>12 then
			items=lootbag_get_items(lootbag_enable_id)
			for i=1 to 8 do
			  items[i]=inv[i+12][1]
			end for
			lootbag_set_items(lootbag_enable_id,items)
		  end if
		end if
    end if
end procedure


global procedure button_draw()
   integer x,y,width,height,index,visable
   for i = 1 to length(class_list) do
      if lootbag_enabled= 0 and i>12 then
	    exit
	  end if
    
	  if length(class_list[i]) then
	    x=class_list[i][button_x]
		y=class_list[i][button_y]
		width=class_list[i][button_width]
		height=class_list[i][button_height]
        index=class_list[i][button_index]
		visable=class_list[i][button_isvisable]
		if index!=-1 and i!=selected and equip_delta_mod(index,equip_sprite)!=0 then
		  draw_spritesheet_texture_ext(class_list[i][button_x]+3,class_list[i][button_y]+3,equip_delta_mod(index,equip_sprite),  equip_delta_mod(index,equip_indexx),34,34)
		end if
	  end if
	end for
	
	-- Draw dragged item last (on top)
    if selected > 0 and selected <= length(class_list) then
        if length(class_list[selected]) then
            index = class_list[selected][button_index]
            if index != -1 then
                draw_spritesheet_texture_ext(
                    mouse_x - 17,  -- center under cursor
                    mouse_y - 17,
                    equip_delta_mod(index, equip_sprite),
                    equip_delta_mod(index, equip_indexx),
                    34, 34
                )
            end if
        end if
    end if

end procedure

global procedure button_mouse_pressed(integer mx, integer my)
    integer  x, y, width, height, index,visable

    for i = 1 to length(class_list) do

        if length(class_list[i]) then
            x = class_list[i][button_x]
            y = class_list[i][button_y]
            width = class_list[i][button_width]
            height = class_list[i][button_height]
            index = class_list[i][button_index]
            visable=class_list[i][button_isvisable]
            -- only select if mouse is inside slot AND slot has an item
			
            if mx >= x and mx <= x + width and my >= y and my <= y + height then
                if index != -1 then
                    selected = i
                else
                    selected = 0
                end if
                exit
            end if
        end if
    end for
end procedure


global procedure button_mouse_released(integer mx, integer my)
    integer  x, y, w, h
	 integer released_inside,visable
	 sequence items
    released_inside = 0

    for i = 1 to length(class_list) do
	  
        if length(class_list[i]) then
            x = class_list[i][button_x]
            y = class_list[i][button_y]
            w = class_list[i][button_width]
            h = class_list[i][button_height]
			visable=class_list[i][button_isvisable]

            if mx >= x and mx <= x + w and my >= y and my <= y + h then
                if selected > 0 and selected <= length(class_list) then
				  if lootbag_enabled= 0 and i<12 then
	                try_swap_slots(selected, i)
					selected=0
	             end if
                 if lootbag_enabled= 1 then 
                    try_swap_slots(selected, i)
					selected=0
				 end if
                end if
                released_inside = 1
                exit
            end if
        end if
    end for
	
	-- If released outside GUI area (e.g. to the left of 610px)
    if released_inside = 0 and selected > 0 then
        if mx < 610 then
		    if lootbag_enabled= 1 and selected >= 12 then 
			  --need to remove item from lootbag
			  items=lootbag_get_items(lootbag_enable_id)
			   items[selected-12]=-1
			  lootbag_set_items(lootbag_enable_id,items)
			end if
		
            -- Remove the item from the inventory
            inv[selected][1] = -1
            class_list[selected][button_index] = -1
			selected = 0
			
			
        end if
    end if

    
end procedure





global function button_get_list(integer handle)
  return class_list[handle]
end function

global function button_get_free_size(integer handle)
  return length(button_freelist[handle])
end function


global function button_get_freelist(integer handle)
  return button_freelist[handle]
end function


global function button_get_x(integer handle)
  return class_list[handle][button_x]
end function

global function button_get_y(integer handle)
  return class_list[handle][button_y]
end function

global function button_get_totalnumber()
  return length(class_list)
end function

global procedure button_set_x(integer handle, integer x)
  class_list[handle][button_x]=x
end procedure

global procedure button_set_y(integer handle, integer y)
  class_list[handle][button_y]=y
end procedure

global procedure button_set_visable(integer handle, integer val)
  class_list[handle][button_isvisable]=val
end procedure

global function button_get_visable(integer handle)
  return class_list[handle][button_isvisable]
end function






global procedure button_delete(integer handle)
  class_list[handle]={}
  button_freelist[handle]={}
  class_freelist =append(class_freelist, handle)
end procedure
